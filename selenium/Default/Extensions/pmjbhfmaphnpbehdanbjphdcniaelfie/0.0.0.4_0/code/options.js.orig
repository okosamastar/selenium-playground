
dojo.provide("jazz.core.loader");

dojo.declare("jazz.core.loader", null, {
	"-chains-": { constructor: "manual" }
});
/******************************************************************************* 
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2005, 2013. All Rights Reserved.
 * 
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
dojo.provide("com.ibm.jdojo.lang.Runtime");


(function() {

var loader= jazz.core.loader;

dojo.mixin(com.ibm.jdojo.lang.Runtime, {

	typeForName : function(typeName) {
		var ctor= dojo.getObject(typeName);
		if (!ctor) {
			loader.load_sync(typeName);
			ctor= dojo.getObject(typeName);
		}
		if (ctor == null) {
			throw new Error("Unknown type");
		}

		return ctor;
	},

	newInstance : function(type) {		
		// arguments to pass to the ctor: the arguments passed to newInstance, except for the first argument
		var ctorArgs= dojo.filter(arguments, function(val, idx) { return idx > 0; });
		return this.newInstanceWithArrayArgs(type, ctorArgs);
	},

	newInstanceWithArrayArgs : function(type, ctorArgs) {
		var ctor= null;
		if (dojo.isString(type)) {
			ctor= this.typeForName(type);
		} else if (dojo.isFunction(type)) {
			ctor= type;
		} else {
			throw new Error("type argument is expected to be a type name or constructor");
		}

		if (ctor == null) {
			throw new Error("Unknown type");
		}
		
		// create an indirection using a synthetic ctor:
		// this allows calling the original ctor using variable arguments...
		function varArgCtor(args) {
			ctor.apply(this, args);
		}
		// ... while making use of the new constructor to set the correct prototype
		varArgCtor.prototype= ctor.prototype;
		return new varArgCtor(ctorArgs);
	},

	newInstanceByName: function(typeName, onLoad) {
		if(!dojo.isString(typeName)){
			throw new Error("type argument is expected to be a type name");
		}
		
		var $this= this;
		var $onLoad= onLoad;
		var $arguments= dojo.filter(arguments, function(val, idx) { return idx != 1; });
		
		loader.load_async(typeName, function(result){
			var obj= $this.newInstance.apply($this, $arguments);
			$onLoad(obj);
		});
	},
	
	implementsInterface : function(subject, interfaceName) {
		if (!subject)
			return false;

		var typeDef= subject.constructor.prototype;
		while (typeDef) {
			if (typeDef.$interfaces !== undefined && typeDef.$interfaces[interfaceName] === true)
				return true;

			typeDef= typeDef.constructor.superclass;
		}
		return false;
	},

	declareInterface : function(interfaceName, properties) {
		var interfaceInstance= dojo.declare(interfaceName, null, {
			constructor : function() {
				throw new Error("Can't instantiate interface type");
			},
			$isInterface : true
		});

		if (properties != null) {
			dojo.mixin(interfaceInstance, properties);
		}
		return interfaceInstance;
	},

	isInstance : function(subject, type) {
		if (type.prototype.$isInterface) {
			return this.implementsInterface(subject, type.prototype.declaredClass);
		} else {
			return subject instanceof type;
		}
	},
	
	getProperties : function(subject) {
		var result= []; 
		for (var name in subject)
			result.push(name); 
		return result;
	},
	
	getValues: function(subject) {
		var result= []; 
		for (var name in subject)
			result.push(subject[name]); 
		return result;
	}

});

})();
/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2014. All Rights Reserved.
 * 
 * Note to U.S. Government Users Restricted Rights:  Use,
 * duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
// NOTE: THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY!
dojo.provide("com.ibm.team.chrome.common.Bootstrap");


(function() {
var jdojo= com.ibm.jdojo.lang.Runtime;

var Bootstrap= dojo.declare("com.ibm.team.chrome.common.Bootstrap", null, {
	"-chains-": { constructor: "manual" }
});

Bootstrap.content= function(entry) {
	window.setTimeout(function() {
		entry.start();
	}, 0);
	return undefined;
};
Bootstrap.background= function(entry) {
	var props= jdojo.getProperties(entry);
	var $subject= props;
	var $length= $subject.length;
	for (var $count= 0; $count < $length; $count++){
		var prop= $subject[$count];
		var p= entry[prop];
		if (dojo.isFunction(p)) {
			window[prop]= dojo.hitch(entry, p);
		}
	}
	entry.start();
	return undefined;
};

})();
/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2014. All Rights Reserved.
 * 
 * Note to U.S. Government Users Restricted Rights:  Use,
 * duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
// NOTE: THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY!
dojo.provide("com.ibm.team.rtc.chrome.qls.CountryImages");

(function() {
var CountryImages= dojo.declare("com.ibm.team.rtc.chrome.qls.CountryImages", null, {
	"-chains-": { constructor: "manual" }
});

CountryImages.CODES= ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BR", "BS", "BT", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "EU", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GG", "GH", "GI", "GL", "GM", "GN", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HN", "HR", "HT", "HU", "IC", "ID", "IE", "IL", "IM", "IN", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];
CountryImages.getIconUrl= function(imageCode, requestedSize) {
	var sizes= [16, 24, 32, 48, 64];
	var iconSize= sizes[0];
	var $subject= sizes;
	var $length= $subject.length;
	for (var $count= 0; $count < $length; $count++){
		var i= $subject[$count];
		if (requestedSize <= i) {
			iconSize= i;
			break;
		}
	}
	return "icons/country/" + iconSize + "/" + imageCode + ".png";
};

})();
/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2014. All Rights Reserved.
 * 
 * Note to U.S. Government Users Restricted Rights:  Use,
 * duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
// NOTE: THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY!
dojo.provide("com.ibm.team.rtc.chrome.qls.Locales");


(function() {
var CountryImages= com.ibm.team.rtc.chrome.qls.CountryImages;

var Locales= dojo.declare("com.ibm.team.rtc.chrome.qls.Locales", null, {
	"-chains-": { constructor: "manual" }
});

Locales.NULL= {uuid: "$0", code: "", displayName: "Disabled", iconCode: "_unknown"};
Locales.BUILT_IN= [Locales.NULL, {uuid: "$001", code: "en", displayName: "English", iconCode: "GB"}, {uuid: "$002", code: "ar", displayName: "Arabic"}, {uuid: "$003", code: "bg", displayName: "Bulgarian"}, {uuid: "$004", code: "cs", displayName: "Czech", iconCode: "CZ"}, {uuid: "$005", code: "da", displayName: "Danish", iconCode: "DK"}, {uuid: "$006", code: "de", displayName: "German"}, {uuid: "$007", code: "el", displayName: "Greek", iconCode: "GR"}, {uuid: "$008", code: "es", displayName: "Spanish"}, {uuid: "$009", code: "fi", displayName: "Finnish"}, {uuid: "$010", code: "fr", displayName: "French"}, {uuid: "$011", code: "hr", displayName: "Croatian"}, {uuid: "$012", code: "hu", displayName: "Hungarian"}, {uuid: "$013", code: "it", displayName: "Italian"}, {uuid: "$014", code: "ja", displayName: "Japanese", iconCode: "JP"}, {uuid: "$015", code: "kk", displayName: "Kazakh", iconCode: "KZ"}, {uuid: "$016", code: "ko", displayName: "Korean", iconCode: "KR"}, {uuid: "$017", code: "no", displayName: "Norwegian"}, {uuid: "$018", code: "nl", displayName: "Dutch"}, {uuid: "$019", code: "pl", displayName: "Polish"}, {uuid: "$020", code: "pt", displayName: "Portugese (Portugal)"}, {uuid: "$021", code: "pt-br", displayName: "Portugese (Brazil)", iconCode: "BR"}, {uuid: "$022", code: "ro", displayName: "Romanian"}, {uuid: "$023", code: "ru", displayName: "Russian"}, {uuid: "$024", code: "sk", displayName: "Slovak"}, {uuid: "$025", code: "sl", displayName: "Slovenian"}, {uuid: "$026", code: "sv", displayName: "Swedish"}, {uuid: "$027", code: "th", displayName: "Thai"}, {uuid: "$028", code: "tr", displayName: "Turkish"}, {uuid: "$029", code: "uk", displayName: "Ukrainian", iconCode: "UA"}, {uuid: "$030", code: "zh", displayName: "Chinese Simplified (ZH)", iconCode: "CN"}, {uuid: "$031", code: "zh-tw", displayName: "Chinese Traditional", iconCode: "CN"}, {uuid: "$032", code: "zh-cn", displayName: "Chinese Simplified (ZH-CN)", iconCode: "CN"}];
Locales.DEFAULT= [Locales.BUILT_IN[0].uuid, Locales.BUILT_IN[1].uuid, Locales.BUILT_IN[6].uuid, Locales.BUILT_IN[19].uuid, Locales.BUILT_IN[30].uuid];
Locales.getIconUrl= function(locale, requestedSize) {
	return CountryImages.getIconUrl((typeof (locale.iconCode) !== 'undefined') ? locale.iconCode : locale.code.toUpperCase(), requestedSize);
};

})();
/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2014. All Rights Reserved.
 * 
 * Note to U.S. Government Users Restricted Rights:  Use,
 * duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
// NOTE: THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY!
dojo.provide("com.ibm.team.rtc.chrome.qls.UUID");


(function() {
/**
 * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
 */
var UUID= dojo.declare("com.ibm.team.rtc.chrome.qls.UUID", null, {
	"-chains-": { constructor: "manual" }
});

UUID.generate= function() {
	return UUID.s4() + UUID.s4() + "-" + UUID.s4() + "-" + UUID.s4() + "-" + UUID.s4() + "-" + UUID.s4() + UUID.s4() + UUID.s4();
};
UUID.s4= function() {
	return (Math.floor(((1 + Math.random()) * 0x10000))).toString(16).substring(1);
};

})();
/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2014. All Rights Reserved.
 * 
 * Note to U.S. Government Users Restricted Rights:  Use,
 * duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
// NOTE: THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY!
dojo.provide("com.ibm.team.rtc.chrome.qls.options.Options");


(function() {
var team= com.ibm.team;
var Bootstrap= team.chrome.common.Bootstrap;
var qls= team.rtc.chrome.qls;
var CountryImages= qls.CountryImages;
var Locales= qls.Locales;
var UUID= qls.UUID;

var Options= dojo.declare("com.ibm.team.rtc.chrome.qls.options.Options", null, {
	"-chains-": { constructor: "manual" },

	constructor: function() {
	},

	start: function() {
		this._renderLocales(Locales.BUILT_IN, true);
		this._renderPicker();
		chrome.storage.local.get(["additional-locales", "enabled-locales"], dojo.hitch(this, function(settings) {
			this._updateCustomLocales(settings["additional-locales"]);
			this._updateEnablement(settings["enabled-locales"]);
		}));
		chrome.storage.onChanged.addListener(dojo.hitch(this, function(settings, areaName) {
			var change= settings["additional-locales"];
			if (change != null) {
				this._updateCustomLocales(change.newValue);
			}
			change= settings["enabled-locales"];
			if (change != null) {
				this._updateEnablement(change.newValue);
			}
		}));
	},

	_renderLocales: function(locales, builtIn) {
		var document= window.document;
		var choices= document.getElementById("locales-" + (builtIn ? "builtIn" : "custom"));
		while(choices.hasChildNodes()){
			choices.removeChild(choices.firstChild);
		}
		var $subject= locales;
		var $length= $subject.length;
		for (var $count= 0; $count < $length; $count++){
			var locale= $subject[$count];
			choices.appendChild(this._renderLocale(locale, builtIn));
		}
		var addButton= document.getElementById("add-locale-button");
		addButton.addEventListener('click', dojo.hitch(this, function(event) {
			var locale= {uuid: UUID.generate(), code: document.getElementById("new-locale-code").value, displayName: document.getElementById("new-locale-displayname").value, iconCode: document.getElementById("new-locale-flag").value};
			this._toggleLocale(locale, true);
			document.getElementById("new-locale-flag").focus();
		}), false);
	},

	_renderPicker: function() {
		var document= window.document;
		var flagChoice= document.getElementById("new-locale-flag");
		var $subject2= CountryImages.CODES;
		var $length2= $subject2.length;
		for (var $count2= 0; $count2 < $length2; $count2++){
			var code= $subject2[$count2];
			var option= document.createElement("option");
			option.value= code;
			option.label= code;
			option.appendChild(document.createTextNode(code));
			flagChoice.appendChild(option);
		}
		var listener= function(event) {
			var flagPreview= document.getElementById("flag-preview");
			var image= document.createElement("img");
			image.src= CountryImages.getIconUrl(flagChoice.value, 16);
			if (flagPreview.firstChild != null) {
				flagPreview.replaceChild(image, flagPreview.firstChild);
			} else {
				flagPreview.appendChild(image);
			}
			flagPreview.appendChild(image);
		};
		listener(null);
		flagChoice.addEventListener('change', listener, false);
	},

	_renderLocale: function(locale, builtIn) {
		var document= window.document;
		var container= document.createElement("tr");
		var td= document.createElement("td");
		var input= document.createElement("input");
		input.type= "checkbox";
		input.name= "locale-checkbox";
		input.setAttribute("data-locale-id", locale.uuid);
		input.addEventListener('change', dojo.hitch(this, function(event) {
			this._toggleEnabled(locale, input.checked);
		}), false);
		container.appendChild(td);
		td.appendChild(input);
		td= document.createElement("td");
		var flag= document.createElement("img");
		flag.src= Locales.getIconUrl(locale, 16);
		container.appendChild(td);
		td.appendChild(flag);
		td= document.createElement("td");
		var countryCode= document.createElement("span");
		countryCode.appendChild(document.createTextNode(locale.code));
		container.appendChild(countryCode);
		container.appendChild(td);
		td.appendChild(countryCode);
		td= document.createElement("td");
		var displayName= document.createElement("span");
		displayName.appendChild(document.createTextNode(locale.displayName));
		container.appendChild(td);
		td.appendChild(displayName);
		td= document.createElement("td");
		container.appendChild(td);
		if (!builtIn) {
			var button= document.createElement("button");
			button.className= "btn btn-sm btn-danger";
			var icon= document.createElement("span");
			icon.className= "glyphicon glyphicon-remove";
			icon.title= "Remove Locale";
			button.appendChild(icon);
			td.appendChild(button);
			button.addEventListener('click', dojo.hitch(this, function(event) {
				this._toggleLocale(locale, false);
			}), false);
		}
		return container;
	},

	_updateCustomLocales: function(additional) {
		var locales= additional != null && additional.locales != null ? additional.locales : [];
		this._renderLocales(locales, false);
	},

	_updateEnablement: function(enabled) {
		var document= window.document;
		var checkBoxes= document.getElementsByName("locale-checkbox");
		var settings= enabled.enabled;
		for (var i= 0; i < checkBoxes.length; i++){
			var checkBox= checkBoxes.item(i);
			checkBox.checked= (!!(settings[checkBox.getAttribute("data-locale-id")]));
		}
	},

	_toggleLocale: function(locale, add) {
		chrome.storage.local.get(["additional-locales", "enabled-locales"], function(settings) {
			var additionalLocales= settings["additional-locales"];
			if (additionalLocales == null) {
				additionalLocales= {locales: []};
			}
			if (add) {
				additionalLocales.locales.push(locale);
			} else {
				for (var i= 0; i < additionalLocales.locales.length; ){
					var l= additionalLocales.locales[i];
					if (l.uuid === locale.uuid) {
						additionalLocales.locales.splice(i, 1);
					} else {
						i++;
					}
				}
			}
			var en= settings["enabled-locales"];
			if (add) {
				en.enabled[locale.uuid]= true;
			} else {
				delete en.enabled[locale.uuid];
			}
			chrome.storage.local.set({"additional-locales": additionalLocales, "enabled-locales": en});
		});
	},

	_toggleEnabled: function(locale, enabled) {
		chrome.storage.local.get(["enabled-locales"], function(settings) {
			var en= settings["enabled-locales"];
			if (enabled) {
				en.enabled[locale.uuid]= true;
			} else {
				delete en.enabled[locale.uuid];
			}
			chrome.storage.local.set({"enabled-locales": en});
		});
	},

	$interfaces: {
		'com.ibm.team.chrome.common.IEntry': true
	}
});

Options.DATA_LOCALE_ID= "data-locale-id";
Options.LOCALE_CHECKBOX= "locale-checkbox";
Options._= Bootstrap.content(new Options());

})();
