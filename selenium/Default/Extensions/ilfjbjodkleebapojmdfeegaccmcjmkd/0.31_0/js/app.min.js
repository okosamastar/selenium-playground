;(function($) {
  'use strict'

  var DesignHunt = function DesignHunt(el) {
    var url = window.location.href
    var captured = /search=([^&]+)/.exec(url) // Value is in [1] ('384' in our case)

    var result = captured ? captured : ''
    this.searchTerm = result[1]
    this.skipNumber = 0
    this.el = $(el) // container element

    this.searchTerm
    this.feedURL = 'https://designhunt.us/api/'
    this.searchURL = 'https://designhunt.us/api/'
    this.currentFeed = null
    this.user = null
  }

  DesignHunt.prototype = {
    init: function init() {
      if (this.searchTerm !== undefined) {
        var decodedSearchString = decodeURIComponent(
          this.searchTerm.replace(/\+/g, ' ')
        )
        $('#search-input').val(decodedSearchString)

        this.getFeed(this.feedURL + 'search?q=' + this.searchTerm)
        _gaq.push(['_trackEvent', 'Feed', 'search', this.searchTerm])
      } else {
        this.getFeed(this.feedURL + 'feed/')
      }

      // this.getFeed(this.feedURL + this.skipNumber)
      this.windowListen(this)
    },
    windowListen: function windowListen(self) {
      var self = self

      window.onscroll = function(ev) {
        if (
          window.innerHeight + window.scrollY >=
          document.body.scrollHeight - 300
        ) {
          var $this = $('#grid')

          if (!$this.data('loading')) {
            $this.data('loading', true)
            if (self.searchTerm !== undefined) {
              self.skipNumber = self.skipNumber + 300
            } else {
              self.skipNumber = self.skipNumber + 25
            }
            if (self.searchTerm !== undefined) {
            } else {
              self.getFeed(self.feedURL + 'feed?skip=' + self.skipNumber)
            }

            $this.removeData('loading')
          } else {
          }
        }
      }
    },
    getFeed: function getFeed(feed, type) {
      var self = this
      $.getJSON(feed, function(data) {
        var user = data['user']
        self.user = user
        self.renderFeed(data['posts'])
      })
    },
    appendToFeed: function appendToFeed(feed, type) {
      var self = this
      $.getJSON(feed, function(data) {
        var user = data['user']
        self.user = user
        self.renderFeed(data['posts'])
        _gaq.push(['_trackEvent', 'Feed', 'append'])
      })
    },
    addElementsToPage: function addElementsToPage() {
      $('.masonry')
        .imagesLoaded()
        .always(function(instance) {})
        .done(function(instance) {})
        .fail(function() {})
        .progress(function(instance, image) {
          var result = image.isLoaded ? 'loaded' : 'broken'
          var $item = $(image.img).parent()
          $item.removeClass('is-loading')

          if (!image.isLoaded) {
            $item.addClass('is-broken')
            $item.remove()
          }
        })
    },
    renderFeed: function renderFeed(results) {
      var self = this

      for (var i in results) {
        var obj = results[i],
          id = obj.objectId,
          img = obj.image_url,
          width = obj.imageWidth,
          height = obj.imageHeight,
          colors = obj.colors,
          short_url = obj.short_url,
          title = obj.title,
          url = obj.source_url

        if (!(img == undefined || url == undefined)) {
          var aspect = ''
          var aspectNumber = width / height

          if (height > width) {
            aspect = 'tall'
          } else {
            if (aspectNumber == 1) {
              aspect = 'square'
            }
            if (aspectNumber >= 1.3) {
              aspect = 'wide'
            }

            if (aspectNumber >= 1.6) {
              aspect = 'mid-wide'
            }

            if (aspectNumber >= 1.8) {
              aspect = 'ultra-wide'
            }
          }

          var html = $(
            '<div class="masonry-brick masonry-brick--h is-loading ' +
              aspect +
              '" data-link="' +
              url +
              '"><img class="masonry-img" src="' +
              img +
              '"/></div>'
          )
          $('.masonry').append(html) // position them within the existing grid
        }
      }

      self.addElementsToPage()
      _gaq.push(['_trackEvent', 'Feed', 'refresh'])
    }
  }
  $(document).ready(function() {
    // initialize app
    var DesignHuntApp = new DesignHunt('.grid')
    DesignHuntApp.init()

    $('.masonry--h').on('click', '.masonry-brick--h', function() {
      var currentLink = $(this).attr('data-link')
      _gaq.push(['_trackEvent', 'Image', 'click'])
      window.open(currentLink)
      // Do something on an existent or future .dynamicElement
    })
  })
})(jQuery)
//# sourceMappingURL=data:application/json;charset=utf8;base64,
